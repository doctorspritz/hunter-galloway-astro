---
/**
 * Image Component
 * Hunter Galloway Design System - Atomic Component
 * 
 * A flexible image component with responsive loading, optimization, and WordPress-style features.
 * Supports lazy loading, object fit, border radius variants, and responsive images.
 */

import type { ImageProps } from './Image.types';
import { semantic } from '../../../tokens/semantic';

interface Props extends ImageProps {}

const {
  src,
  alt,
  width,
  height,
  loading = 'lazy',
  fit = 'cover',
  radius = 'none',
  bordered = false,
  placeholder = false,
  class: additionalClasses = '',
  srcSet,
  sizes,
  optimize = true,
} = Astro.props;

// Build CSS classes based on props
const imageClasses = [
  'hg-image',
  `hg-image--fit-${fit}`,
  `hg-image--radius-${radius}`,
  bordered && 'hg-image--bordered',
  placeholder && 'hg-image--with-placeholder',
  additionalClasses,
].filter(Boolean).join(' ');

// Handle different width/height formats
const widthAttr = typeof width === 'number' ? `${width}px` : width;
const heightAttr = typeof height === 'number' ? `${height}px` : height;

// WordPress-style image optimization (future enhancement)
const optimizedSrc = optimize && src.includes('/images/') 
  ? src.replace(/\.(jpg|jpeg|png)$/i, '.webp') 
  : src;

// Fallback for responsive images
const responsiveSrcSet = srcSet || (optimize ? `${optimizedSrc} 1x` : undefined);
---

<div class={`hg-image-wrapper ${additionalClasses}`}>
  {placeholder && (
    <div class="hg-image-placeholder" aria-hidden="true">
      <div class="placeholder-shimmer"></div>
    </div>
  )}
  
  <img 
    class={imageClasses}
    src={optimizedSrc}
    alt={alt}
    width={widthAttr}
    height={heightAttr}
    loading={loading}
    srcset={responsiveSrcSet}
    sizes={sizes}
    style={widthAttr || heightAttr ? `width: ${widthAttr || 'auto'}; height: ${heightAttr || 'auto'};` : undefined}
  />
</div>

<style define:vars={{
  borderPrimary: semantic.color.border.primary,
  borderSecondary: semantic.color.border.secondary,
  surfaceSecondary: semantic.color.surface.secondary,
  surfaceTertiary: semantic.color.surface.tertiary,
  radiusSm: semantic.radius.sm,
  radiusMd: semantic.radius.md,
  radiusLg: semantic.radius.lg,
  durationNormal: semantic.duration.normal,
}}>
/* Image component styles using design tokens */
.hg-image-wrapper {
  position: relative;
  display: inline-block;
  overflow: hidden;
}

.hg-image {
  display: block;
  max-width: 100%;
  height: auto;
  transition: all var(--durationNormal) ease;
}

/* Object fit variants */
.hg-image--fit-cover {
  object-fit: cover;
}

.hg-image--fit-contain {
  object-fit: contain;
}

.hg-image--fit-fill {
  object-fit: fill;
}

.hg-image--fit-none {
  object-fit: none;
}

.hg-image--fit-scale-down {
  object-fit: scale-down;
}

/* Border radius variants */
.hg-image--radius-none {
  border-radius: 0;
}

.hg-image--radius-sm {
  border-radius: var(--radiusSm);
}

.hg-image--radius-md {
  border-radius: var(--radiusMd);
}

.hg-image--radius-lg {
  border-radius: var(--radiusLg);
}

.hg-image--radius-full {
  border-radius: 50%;
}

/* Border variant */
.hg-image--bordered {
  border: 1px solid var(--borderPrimary);
}

/* Placeholder/loading state */
.hg-image-placeholder {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: var(--surfaceSecondary);
  display: flex;
  align-items: center;
  justify-content: center;
}

.placeholder-shimmer {
  width: 100%;
  height: 100%;
  background: linear-gradient(
    90deg,
    var(--surfaceSecondary) 25%,
    var(--surfaceTertiary) 50%,
    var(--surfaceSecondary) 75%
  );
  background-size: 200% 100%;
  animation: shimmer 1.5s infinite;
}

@keyframes shimmer {
  0% {
    background-position: -200% 0;
  }
  100% {
    background-position: 200% 0;
  }
}

/* WordPress-style responsive behavior */
@media (max-width: 768px) {
  .hg-image {
    width: 100% !important;
    height: auto !important;
  }
}

/* Error state styling */
.hg-image:not([src]),
.hg-image[src=""] {
  background: var(--surfaceSecondary);
  border: 1px dashed var(--borderSecondary);
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 120px;
}

.hg-image:not([src])::after,
.hg-image[src=""]::after {
  content: "Image not found";
  color: var(--borderSecondary);
  font-size: 0.875rem;
}
</style>