name: CI
on:
  pull_request:
    branches: [main, develop]
jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm ci
      - run: npm run lint
      - run: npm run lint:css
      - run: npm run test:unit -- --coverage
      - run: npm run build-storybook
      - run: npm run test:storybook
      - run: npm run build
      - run: npx playwright install --with-deps
      - run: npx playwright test tests/visual/wp-comparison.spec.ts
      - name: Percy Visual Tests
        run: npx percy exec -- npx playwright test tests/visual/wp-comparison.spec.ts
        env:
          PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}

      # Accessibility tests
      - name: Accessibility Audit
        run: npx playwright test tests/a11y/a11y.spec.ts

      # Lighthouse CI tests
      - name: Lighthouse CI
        run: npx lhci autorun


      # Storybook responsive snapshot tests
      - name: Storybook Responsive Snapshots
        run: npm run test:storybook


      # Upload visual diffs as artifacts
      - name: Upload visual diffs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: visual-diffs
          path: tests/visual/*.png

      # Post visual diff summary to PR
      - name: Post visual diff summary
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const diffDir = 'tests/visual';
            if (!fs.existsSync(diffDir)) {
              core.info('No visual diff directory found.');
              return;
            }
            const files = fs.readdirSync(diffDir).filter(f => f.startsWith('diff-') && f.endsWith('.png'));
            if (files.length === 0) {
              core.info('No visual diffs found — all good!');
              return;
            }
            let body = '## 🔍 Visual Diff Report\n\n';
            body += 'The following visual mismatches were detected:\n\n';
            files.forEach(file => {
              body += `**${file}**\n`;
              body += `![Diff Image](https://raw.githubusercontent.com/${context.repo.owner}/${context.repo.repo}/${context.sha}/tests/visual/${file})\n\n`;
            });
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });


      # Post accessibility & Lighthouse summary to PR
      - name: Post accessibility & Lighthouse summary
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            let body = '## ♿ Accessibility & Lighthouse Report\n\n';

            // Accessibility results (mocked for now - could parse JSON output if saved)
            const a11yResultsPath = 'a11y-results.json';
            if (fs.existsSync(a11yResultsPath)) {
              const a11yData = JSON.parse(fs.readFileSync(a11yResultsPath, 'utf8'));
              const violations = a11yData.violations || [];
              if (violations.length === 0) {
                body += '✅ No accessibility violations found.\n\n';
              } else {
                body += `❌ ${violations.length} accessibility violations found.\n\n`;
                violations.forEach(v => {
                  body += `- **${v.id}**: ${v.description}\n`;
                });
                body += '\n';
              }
            } else {
              body += '⚠ Accessibility test results not found.\n\n';
            }

            // Lighthouse results (mocked for now - could parse JSON output if saved)
            const lhciResultsPath = '.lighthouseci/lhr-0.json';
            if (fs.existsSync(lhciResultsPath)) {
              const lhciData = JSON.parse(fs.readFileSync(lhciResultsPath, 'utf8'));
              const categories = lhciData.categories || {};
              Object.keys(categories).forEach(cat => {
                body += `- **${cat}**: ${(categories[cat].score * 100).toFixed(0)}%\n`;
              });
            } else {
              body += '⚠ Lighthouse results not found.\n';
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });
