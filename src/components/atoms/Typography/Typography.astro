---
/**
 * Typography Component
 * Hunter Galloway Design System - Atomic Component
 * 
 * A flexible typography component that ensures consistent text styling
 * across the application using design tokens.
 */

import type { TypographyProps } from './Typography.types';
import { semantic } from '../../../tokens/semantic';

interface Props extends TypographyProps {}

const {
  element = 'p',
  size = 'md',
  color = 'primary',
  align = 'left',
  weight = 'body',
  noWrap = false,
  class: additionalClasses = '',
} = Astro.props;

// Build CSS classes using design tokens
const sizeClass = size === '4.5xl' ? '4_5xl' : size;
const textClasses = [
  'hg-typography',
  `hg-typography--${sizeClass}`,
  `hg-typography--${weight}`,
  `hg-typography--${color}`,
  `hg-typography--${align}`,
  noWrap && 'hg-typography--nowrap',
  additionalClasses,
].filter(Boolean).join(' ');

// Clean component - no debug logging

// Create inline CSS variables using semantic tokens
const inlineStyles = [
  `--fontSize45xl: ${semantic.typography.size['4.5xl']}`,
  `--fontSize5xl: ${semantic.typography.size['5xl']}`,
  `--fontSize4xl: ${semantic.typography.size['4xl']}`,
  `--fontSize3xl: ${semantic.typography.size['3xl']}`,
  `--fontSize2xl: ${semantic.typography.size['2xl']}`,
  `--fontSizeXl: ${semantic.typography.size.xl}`,
  `--fontSizeLg: ${semantic.typography.size.lg}`,
  `--fontSizeMd: ${semantic.typography.size.md}`,
  `--fontSizeSm: ${semantic.typography.size.sm}`,
  `--fontSizeXs: ${semantic.typography.size.xs}`,
  
  `--fontWeightHeading: ${semantic.typography.weight.heading}`,
  `--fontWeightDisplay: ${semantic.typography.weight.display}`,
  `--fontWeightStrong: ${semantic.typography.weight.strong}`,
  `--fontWeightEmphasis: ${semantic.typography.weight.emphasis}`,
  `--fontWeightBody: ${semantic.typography.weight.body}`,
  
  `--colorTextPrimary: ${semantic.color.text.primary}`,
  `--colorTextSecondary: ${semantic.color.text.secondary}`,
  `--colorTextTertiary: ${semantic.color.text.tertiary}`,
  `--colorTextInverse: ${semantic.color.text.inverse}`,
].join('; ');

// Dynamic component rendering
const Element = element;
---

<Element class={textClasses} style={inlineStyles}>
  <slot />
</Element>

<style>
/* Typography component base styles */
.hg-typography {
  font-family: 'Open Sans', system-ui, sans-serif;
  margin: 0;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* Size variants */
.hg-typography--xs { font-size: var(--fontSizeXs); }
.hg-typography--sm { font-size: var(--fontSizeSm); }
.hg-typography--md { font-size: var(--fontSizeMd); }
.hg-typography--lg { font-size: var(--fontSizeLg); }
.hg-typography--xl { font-size: var(--fontSizeXl); }
.hg-typography--2xl { font-size: var(--fontSize2xl); }
.hg-typography--3xl { font-size: var(--fontSize3xl); }
.hg-typography--4xl { font-size: var(--fontSize4xl); }
.hg-typography--4_5xl { font-size: var(--fontSize45xl); }
.hg-typography--5xl { font-size: var(--fontSize5xl); }

/* Weight variants */
.hg-typography--body { font-weight: var(--fontWeightBody); }
.hg-typography--emphasis { font-weight: var(--fontWeightEmphasis); }
.hg-typography--strong { font-weight: var(--fontWeightStrong); }
.hg-typography--heading { font-weight: var(--fontWeightHeading); }
.hg-typography--bold { font-weight: var(--fontWeightHeading); }
.hg-typography--display { font-weight: var(--fontWeightDisplay); }

/* Color variants */
.hg-typography--primary { color: var(--colorTextPrimary); }
.hg-typography--secondary { color: var(--colorTextSecondary); }
.hg-typography--tertiary { color: var(--colorTextTertiary); }
.hg-typography--inverse { color: var(--colorTextInverse); }

/* Alignment variants */
.hg-typography--left { text-align: left; }
.hg-typography--center { text-align: center; }
.hg-typography--right { text-align: right; }
.hg-typography--justify { text-align: justify; }

/* Utility classes */
.hg-typography--nowrap { white-space: nowrap; }
</style>